{"ast":null,"code":"const data = require(\"./scheduleData.json\");\n\nconst changeTimeFormat = time => new Date(time);\n\nconst changeDateFormat = date => new Date(date).getTime(); //return : 1657456804691\n\n\nexport const checkAvailability = (roomId, startTime, endTime) => {\n  const unAvailableRoom = data.filter(room => {\n    const startTime = changeTimeFormat(room.startTime);\n    const endTime = changeDateFormat(room.endTime);\n    return room.roomId === roomId && startTime <= changeTimeFormat(startTime) && endTime >= changeTimeFormat(endTime);\n  });\n\n  if (unAvailableRoom.length !== 0) {\n    return \"This room already reserved.\";\n  } else {\n    return \"This room is available.\";\n  }\n}; //   Assume date from booking date\n\nexport const currentDay = \"2019-09-28 00:00:00\";\nexport const getBookingsForWeek = (roomId, weekNo) => {\n  const currentDate = new Date(currentDay).getTime();\n  const tomorrowDate = currentDate + 1 * 24 * 60 * 60 * 1000;\n  const day = new Date(currentDay).getDate();\n  const dayOfTheWeek = new Date(currentDay).getDay(); //   Find the first day of this week\n\n  const fistDayOfThisWeek = day - dayOfTheWeek + (dayOfTheWeek == 0 ? -6 : 1); //    Transform to time\n\n  const firstDateOfThisWeek = new Date(new Date(currentDay).setDate(fistDayOfThisWeek)).getTime();\n  const firstDateOfNextWeek = firstDateOfThisWeek + 7 * 24 * 60 * 60 * 1000;\n  const firstDateOfThirdWeek = firstDateOfThisWeek + 14 * 24 * 60 * 60 * 1000;\n  const getDate = data.filter(booking => {\n    const startTime = changeDateFormat(booking.startTime);\n    const endTime = changeDateFormat(booking.endTime); // If weekNo = 0 return [...arr] of 'today bookings'\n    // If weekNo = 1 return [...arr] of 'this week bookings'\n    // If weekNo = 2 return [...arr] of 'next week bookings'\n    // If weekNo = 4 return [...arr] of 'whole month bookings'\n\n    return booking.roomId === roomId && (weekNo === 0 ? startTime >= currentDate && startTime < tomorrowDate || endTime >= currentDate && endTime < tomorrowDate : weekNo === 1 ? startTime >= fistDayOfThisWeek && startTime < firstDateOfNextWeek || endTime >= fistDayOfThisWeek && endTime < firstDateOfNextWeek : weekNo === 2 ? startTime >= firstDateOfNextWeek && startTime < firstDateOfThirdWeek || endTime >= firstDateOfNextWeek && endTime < firstDateOfThirdWeek : weekNo === 4 ? startTime >= currentDate && startTime < firstDateOfThirdWeek || endTime >= currentDate && endTime < firstDateOfThirdWeek : \"\");\n  });\n  return getDate;\n};\nexport const groupDate = arr => {\n  // 1. assign date reserved as key obj\n  // 2. check if startTime and endTime have range more than one, It will return date between that range\n  //   put date as key obj\n  const groupsDateObj = arr.reduce((group, booking) => {\n    const startTime = booking.startTime.split(\" \")[0];\n    const endTime = booking.endTime.split(\" \")[0];\n    const diffDate = new Date(endTime) - new Date(startTime);\n\n    if (diffDate <= 1) {\n      if (!group[startTime]) {\n        group[startTime] = [];\n      }\n\n      group[startTime].push(booking);\n      return group;\n    } else {\n      // find date between startDate and endDate, if range between two date is more than 1,\n      for (let dt = new Date(startTime); dt <= new Date(endTime); dt.setDate(dt.getDate() + 1)) {\n        const date = new Date(dt).toISOString().slice(0, 10);\n\n        if (!group[date]) {\n          group[date] = [];\n        }\n\n        group[date].push(booking);\n      }\n\n      return group;\n    }\n  }, {}); //   add groups date to one array\n\n  const groupDateAsArray = Object.keys(groupsDateObj).map(date => {\n    return {\n      date,\n      scheduleInDate: groupsDateObj[date]\n    };\n  });\n  return groupDateAsArray;\n};\nexport const getDay = date => {\n  const dayOfTheWeek = new Date(date).getDay() + 1;\n\n  switch (dayOfTheWeek) {\n    case 1:\n      return \"Sunday\";\n      break;\n\n    case 2:\n      return \"Monday\";\n      break;\n\n    case 3:\n      return \"Tuesday\";\n      break;\n\n    case 4:\n      return \"Wednesday\";\n      break;\n\n    case 5:\n      return \"Thursday\";\n      break;\n\n    case 6:\n      return \"Friday\";\n      break;\n\n    case 7:\n      return \"Saturday\";\n      break;\n\n    default:\n      return \"Day\";\n  }\n};\nexport const getDate = date => new Date(date).getDate();\nexport const getMonth = date => {\n  const month = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  const getMonthNo = new Date(date).getMonth();\n  return month[getMonthNo];\n};\nexport const getTime = (startTime, endTime) => {\n  const getStartTime = startTime.split(\" \")[1].split(\":\").slice(0, 2).join(\":\");\n  const getEndTime = endTime.split(\" \")[1].split(\":\").slice(0, 2).join(\":\");\n  return getStartTime + \" - \" + getEndTime;\n};\nexport const formatDateHeader = date => {\n  const day = getDay(date).slice(0, 3);\n  const dayNo = getDate(date);\n  const month = getMonth(date);\n  console.log(`(${day}, ${dayNo} ${month})`);\n};","map":{"version":3,"names":["data","require","changeTimeFormat","time","Date","changeDateFormat","date","getTime","checkAvailability","roomId","startTime","endTime","unAvailableRoom","filter","room","length","currentDay","getBookingsForWeek","weekNo","currentDate","tomorrowDate","day","getDate","dayOfTheWeek","getDay","fistDayOfThisWeek","firstDateOfThisWeek","setDate","firstDateOfNextWeek","firstDateOfThirdWeek","booking","groupDate","arr","groupsDateObj","reduce","group","split","diffDate","push","dt","toISOString","slice","groupDateAsArray","Object","keys","map","scheduleInDate","getMonth","month","getMonthNo","getStartTime","join","getEndTime","formatDateHeader","dayNo","console","log"],"sources":["/Users/piyawanyosthorn/Documents/Interview/Forviz/interview/src/components/02/bookingServices.js"],"sourcesContent":["const data = require(\"./scheduleData.json\");\n\nconst changeTimeFormat = (time) => new Date(time);\nconst changeDateFormat = (date) => new Date(date).getTime(); //return : 1657456804691\n\nexport const checkAvailability = (roomId, startTime, endTime) => {\n  const unAvailableRoom = data.filter((room) => {\n    const startTime = changeTimeFormat(room.startTime);\n    const endTime = changeDateFormat(room.endTime);\n\n    return (\n      room.roomId === roomId &&\n      startTime <= changeTimeFormat(startTime) &&\n      endTime >= changeTimeFormat(endTime)\n    );\n  });\n\n  if (unAvailableRoom.length !== 0) {\n    return \"This room already reserved.\";\n  } else {\n    return \"This room is available.\";\n  }\n};\n\n//   Assume date from booking date\nexport const currentDay = \"2019-09-28 00:00:00\";\n\nexport const getBookingsForWeek = (roomId, weekNo) => {\n  const currentDate = new Date(currentDay).getTime();\n  const tomorrowDate = currentDate + 1 * 24 * 60 * 60 * 1000;\n\n  const day = new Date(currentDay).getDate();\n  const dayOfTheWeek = new Date(currentDay).getDay();\n  //   Find the first day of this week\n  const fistDayOfThisWeek = day - dayOfTheWeek + (dayOfTheWeek == 0 ? -6 : 1);\n  //    Transform to time\n  const firstDateOfThisWeek = new Date(\n    new Date(currentDay).setDate(fistDayOfThisWeek)\n  ).getTime();\n\n  const firstDateOfNextWeek = firstDateOfThisWeek + 7 * 24 * 60 * 60 * 1000;\n  const firstDateOfThirdWeek = firstDateOfThisWeek + 14 * 24 * 60 * 60 * 1000;\n\n  const getDate = data.filter((booking) => {\n    const startTime = changeDateFormat(booking.startTime);\n    const endTime = changeDateFormat(booking.endTime);\n\n    // If weekNo = 0 return [...arr] of 'today bookings'\n    // If weekNo = 1 return [...arr] of 'this week bookings'\n    // If weekNo = 2 return [...arr] of 'next week bookings'\n    // If weekNo = 4 return [...arr] of 'whole month bookings'\n    return (\n      booking.roomId === roomId &&\n      (weekNo === 0\n        ? (startTime >= currentDate && startTime < tomorrowDate) ||\n          (endTime >= currentDate && endTime < tomorrowDate)\n        : weekNo === 1\n        ? (startTime >= fistDayOfThisWeek && startTime < firstDateOfNextWeek) ||\n          (endTime >= fistDayOfThisWeek && endTime < firstDateOfNextWeek)\n        : weekNo === 2\n        ? (startTime >= firstDateOfNextWeek &&\n            startTime < firstDateOfThirdWeek) ||\n          (endTime >= firstDateOfNextWeek && endTime < firstDateOfThirdWeek)\n        : weekNo === 4\n        ? (startTime >= currentDate && startTime < firstDateOfThirdWeek) ||\n          (endTime >= currentDate && endTime < firstDateOfThirdWeek)\n        : \"\")\n    );\n  });\n\n  return getDate;\n};\n\nexport const groupDate = (arr) => {\n  // 1. assign date reserved as key obj\n  // 2. check if startTime and endTime have range more than one, It will return date between that range\n\n  //   put date as key obj\n  const groupsDateObj = arr.reduce((group, booking) => {\n    const startTime = booking.startTime.split(\" \")[0];\n    const endTime = booking.endTime.split(\" \")[0];\n    const diffDate = new Date(endTime) - new Date(startTime);\n\n    if (diffDate <= 1) {\n      if (!group[startTime]) {\n        group[startTime] = [];\n      }\n      group[startTime].push(booking);\n      return group;\n    } else {\n      // find date between startDate and endDate, if range between two date is more than 1,\n      for (\n        let dt = new Date(startTime);\n        dt <= new Date(endTime);\n        dt.setDate(dt.getDate() + 1)\n      ) {\n        const date = new Date(dt).toISOString().slice(0, 10);\n        if (!group[date]) {\n          group[date] = [];\n        }\n        group[date].push(booking);\n      }\n      return group;\n    }\n  }, {});\n\n  //   add groups date to one array\n  const groupDateAsArray = Object.keys(groupsDateObj).map((date) => {\n    return { date, scheduleInDate: groupsDateObj[date] };\n  });\n\n  return groupDateAsArray;\n};\n\nexport const getDay = (date) => {\n  const dayOfTheWeek = new Date(date).getDay() + 1;\n\n  switch (dayOfTheWeek) {\n    case 1:\n      return \"Sunday\";\n      break;\n    case 2:\n      return \"Monday\";\n      break;\n    case 3:\n      return \"Tuesday\";\n      break;\n    case 4:\n      return \"Wednesday\";\n      break;\n    case 5:\n      return \"Thursday\";\n      break;\n    case 6:\n      return \"Friday\";\n      break;\n    case 7:\n      return \"Saturday\";\n      break;\n    default:\n      return \"Day\";\n  }\n};\n\nexport const getDate = (date) => new Date(date).getDate();\n\nexport const getMonth = (date) => {\n  const month = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n\n  const getMonthNo = new Date(date).getMonth();\n\n  return month[getMonthNo];\n};\n\nexport const getTime = (startTime, endTime) => {\n  const getStartTime = startTime.split(\" \")[1].split(\":\").slice(0, 2).join(\":\");\n  const getEndTime = endTime.split(\" \")[1].split(\":\").slice(0, 2).join(\":\");\n\n  return getStartTime + \" - \" + getEndTime;\n};\n\nexport const formatDateHeader = (date) => {\n  const day = getDay(date).slice(0, 3);\n  const dayNo = getDate(date);\n  const month = getMonth(date);\n\n  console.log(`(${day}, ${dayNo} ${month})`);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}