{"ast":null,"code":"const data = require(\"./scheduleData.json\");\n\nconst changeTimeFormat = time => new Date(time);\n\nconst changeDateFormat = date => new Date(date).getTime(); //return : 1657456804691\n\n\nexport const checkAvailability = (roomId, startTime, endTime) => {\n  const unAvailableRoom = data.filter(room => {\n    const startTime = changeTimeFormat(room.startTime);\n    const endTime = changeDateFormat(room.endTime);\n    return room.roomId === roomId && startTime <= changeTimeFormat(startTime) && endTime >= changeTimeFormat(endTime);\n  });\n\n  if (unAvailableRoom.length !== 0) {\n    return \"This room already reserved.\";\n  } else {\n    return \"This room is available.\";\n  }\n}; //   Assume date from booking date\n\nexport const currentDay = \"2019-09-28 00:00:00\";\nexport const getBookingsForWeek = (roomId, weekNo) => {\n  const currentDate = new Date(currentDay).getTime();\n  const tomorrowDate = currentDate + 1 * 24 * 60 * 60 * 1000;\n  const day = new Date(currentDay).getDate();\n  const dayOfTheWeek = new Date(currentDay).getDay(); //   Find the first day of this week\n\n  const fistDayOfThisWeek = day - dayOfTheWeek + (dayOfTheWeek == 0 ? -6 : 1); //    Transform to time\n\n  const firstDateOfThisWeek = new Date(new Date(currentDay).setDate(fistDayOfThisWeek)).getTime();\n  const firstDateOfNextWeek = firstDateOfThisWeek + 7 * 24 * 60 * 60 * 1000;\n  const firstDateOfThirdWeek = firstDateOfThisWeek + 14 * 24 * 60 * 60 * 1000;\n  const getDate = data.filter(booking => {\n    const startTime = changeDateFormat(booking.startTime);\n    const endTime = changeDateFormat(booking.endTime); // If weekNo = 0 return [...arr] of 'today bookings'\n    // If weekNo = 1 return [...arr] of 'this week bookings'\n    // If weekNo = 2 return [...arr] of 'next week bookings'\n\n    return booking.roomId === roomId && (weekNo === 0 ? startTime >= currentDate && startTime < tomorrowDate || endTime >= currentDate && endTime < tomorrowDate : weekNo === 1 ? startTime >= fistDayOfThisWeek && startTime < firstDateOfNextWeek || endTime >= fistDayOfThisWeek && endTime < firstDateOfNextWeek : weekNo === 2 ? startTime >= firstDateOfNextWeek && startTime < firstDateOfThirdWeek || endTime >= firstDateOfNextWeek && endTime < firstDateOfThirdWeek : \"\");\n  });\n  return getDate;\n};\nexport const groupDate = arr => {\n  const groupTime = [];\n  arr.forEach(booking => {\n    const startTime = booking.startTime.split(\" \")[0];\n    const endTime = booking.endTime.split(\" \")[0]; // console.log(booking);\n\n    const found = groupTime.find(book => {\n      const findStartTime = book.startTime.split(\" \")[0];\n      const findEndTime = book.endTime.split(\" \")[0];\n      return new Date(findStartTime) == new Date(startTime);\n    });\n\n    if (found) {\n      found.startTime.push(booking.startTime);\n    }\n\n    console.log(found);\n    return found;\n  }); //   const checkDate = date.map((booking) => {\n  //     const startTime = booking.startTime;\n  //     const endTime = booking.endTime;\n  //   });\n  //   console.log(\"date :\", arr);\n  //   return \"check date :\" + checkDate;\n  //   return groupTime;\n};\nexport const getDay = date => {\n  const dayOfTheWeek = new Date(date).getDay() + 1;\n\n  switch (dayOfTheWeek) {\n    case 1:\n      return \"Sunday\";\n      break;\n\n    case 2:\n      return \"Monday\";\n      break;\n\n    case 3:\n      return \"Tuesday\";\n      break;\n\n    case 4:\n      return \"Wednesday\";\n      break;\n\n    case 5:\n      return \"Thursday\";\n      break;\n\n    case 6:\n      return \"Friday\";\n      break;\n\n    case 7:\n      return \"Saturday\";\n      break;\n\n    default:\n      return \"Day\";\n  }\n};\nexport const getDate = date => new Date(date).getDate();\nexport const getMonth = date => {\n  const month = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  const getMonthNo = new Date(date).getMonth();\n  return month[getMonthNo];\n};\nexport const getTime = (startTime, endTime) => {\n  const getStartTime = startTime.split(\" \")[1].split(\":\").slice(0, 2).join(\":\");\n  const getEndTime = endTime.split(\" \")[1].split(\":\").slice(0, 2).join(\":\");\n  return getStartTime + \" - \" + getEndTime;\n};","map":{"version":3,"names":["data","require","changeTimeFormat","time","Date","changeDateFormat","date","getTime","checkAvailability","roomId","startTime","endTime","unAvailableRoom","filter","room","length","currentDay","getBookingsForWeek","weekNo","currentDate","tomorrowDate","day","getDate","dayOfTheWeek","getDay","fistDayOfThisWeek","firstDateOfThisWeek","setDate","firstDateOfNextWeek","firstDateOfThirdWeek","booking","groupDate","arr","groupTime","forEach","split","found","find","book","findStartTime","findEndTime","push","console","log","getMonth","month","getMonthNo","getStartTime","slice","join","getEndTime"],"sources":["/Users/piyawanyosthorn/Documents/Interview/interview/src/components/02/bookingServices.js"],"sourcesContent":["const data = require(\"./scheduleData.json\");\n\nconst changeTimeFormat = (time) => new Date(time);\nconst changeDateFormat = (date) => new Date(date).getTime(); //return : 1657456804691\n\nexport const checkAvailability = (roomId, startTime, endTime) => {\n  const unAvailableRoom = data.filter((room) => {\n    const startTime = changeTimeFormat(room.startTime);\n    const endTime = changeDateFormat(room.endTime);\n\n    return (\n      room.roomId === roomId &&\n      startTime <= changeTimeFormat(startTime) &&\n      endTime >= changeTimeFormat(endTime)\n    );\n  });\n\n  if (unAvailableRoom.length !== 0) {\n    return \"This room already reserved.\";\n  } else {\n    return \"This room is available.\";\n  }\n};\n\n//   Assume date from booking date\nexport const currentDay = \"2019-09-28 00:00:00\";\n\nexport const getBookingsForWeek = (roomId, weekNo) => {\n  const currentDate = new Date(currentDay).getTime();\n  const tomorrowDate = currentDate + 1 * 24 * 60 * 60 * 1000;\n\n  const day = new Date(currentDay).getDate();\n  const dayOfTheWeek = new Date(currentDay).getDay();\n  //   Find the first day of this week\n  const fistDayOfThisWeek = day - dayOfTheWeek + (dayOfTheWeek == 0 ? -6 : 1);\n  //    Transform to time\n  const firstDateOfThisWeek = new Date(\n    new Date(currentDay).setDate(fistDayOfThisWeek)\n  ).getTime();\n\n  const firstDateOfNextWeek = firstDateOfThisWeek + 7 * 24 * 60 * 60 * 1000;\n  const firstDateOfThirdWeek = firstDateOfThisWeek + 14 * 24 * 60 * 60 * 1000;\n\n  const getDate = data.filter((booking) => {\n    const startTime = changeDateFormat(booking.startTime);\n    const endTime = changeDateFormat(booking.endTime);\n\n    // If weekNo = 0 return [...arr] of 'today bookings'\n    // If weekNo = 1 return [...arr] of 'this week bookings'\n    // If weekNo = 2 return [...arr] of 'next week bookings'\n    return (\n      booking.roomId === roomId &&\n      (weekNo === 0\n        ? (startTime >= currentDate && startTime < tomorrowDate) ||\n          (endTime >= currentDate && endTime < tomorrowDate)\n        : weekNo === 1\n        ? (startTime >= fistDayOfThisWeek && startTime < firstDateOfNextWeek) ||\n          (endTime >= fistDayOfThisWeek && endTime < firstDateOfNextWeek)\n        : weekNo === 2\n        ? (startTime >= firstDateOfNextWeek &&\n            startTime < firstDateOfThirdWeek) ||\n          (endTime >= firstDateOfNextWeek && endTime < firstDateOfThirdWeek)\n        : \"\")\n    );\n  });\n\n  return getDate;\n};\n\nexport const groupDate = (arr) => {\n  const groupTime = [];\n\n  arr.forEach((booking) => {\n    const startTime = booking.startTime.split(\" \")[0];\n    const endTime = booking.endTime.split(\" \")[0];\n\n    // console.log(booking);\n    const found = groupTime.find((book) => {\n      const findStartTime = book.startTime.split(\" \")[0];\n      const findEndTime = book.endTime.split(\" \")[0];\n\n      return new Date(findStartTime) == new Date(startTime);\n    });\n\n    if (found) {\n      found.startTime.push(booking.startTime);\n    }\n    console.log(found);\n    return found;\n  });\n\n  //   const checkDate = date.map((booking) => {\n  //     const startTime = booking.startTime;\n  //     const endTime = booking.endTime;\n  //   });\n\n  //   console.log(\"date :\", arr);\n  //   return \"check date :\" + checkDate;\n\n  //   return groupTime;\n};\n\nexport const getDay = (date) => {\n  const dayOfTheWeek = new Date(date).getDay() + 1;\n\n  switch (dayOfTheWeek) {\n    case 1:\n      return \"Sunday\";\n      break;\n    case 2:\n      return \"Monday\";\n      break;\n    case 3:\n      return \"Tuesday\";\n      break;\n    case 4:\n      return \"Wednesday\";\n      break;\n    case 5:\n      return \"Thursday\";\n      break;\n    case 6:\n      return \"Friday\";\n      break;\n    case 7:\n      return \"Saturday\";\n      break;\n    default:\n      return \"Day\";\n  }\n};\n\nexport const getDate = (date) => new Date(date).getDate();\n\nexport const getMonth = (date) => {\n  const month = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n\n  const getMonthNo = new Date(date).getMonth();\n\n  return month[getMonthNo];\n};\n\nexport const getTime = (startTime, endTime) => {\n  const getStartTime = startTime.split(\" \")[1].split(\":\").slice(0, 2).join(\":\");\n  const getEndTime = endTime.split(\" \")[1].split(\":\").slice(0, 2).join(\":\");\n\n  return getStartTime + \" - \" + getEndTime;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}